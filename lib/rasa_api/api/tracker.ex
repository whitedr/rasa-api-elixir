# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule RasaApi.Api.Tracker do
  @moduledoc """
  API calls for all endpoints tagged `Tracker`.
  """

  alias RasaApi.Connection
  import RasaApi.RequestBuilder


  @doc """
  Add a message to a tracker
  Adds a message to a tracker. This doesn't trigger the prediction loop. It will log the message on the tracker and return, no actions will be predicted or run. This is often used together with the predict endpoint.

  ## Parameters

  - connection (RasaApi.Connection): Connection to server
  - conversation_id (String.t): Id of the conversation
  - message (Message): 
  - opts (KeywordList): [optional] Optional parameters
    - :include_events (String.t): Specify which events of the tracker the response should contain.
  ## Returns

  {:ok, %RasaApi.Model.Tracker{}} on success
  {:error, info} on failure
  """
  @spec add_conversation_message(Tesla.Env.client, String.t, RasaApi.Model.Message.t, keyword()) :: {:ok, RasaApi.Model.Tracker.t} | {:error, Tesla.Env.t}
  def add_conversation_message(connection, conversation_id, message, opts \\ []) do
    optional_params = %{
      include_events: :query
    }
    %{}
    |> method(:post)
    |> url("/conversations/#{conversation_id}/messages")
    |> add_param(:body, :body, message)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %RasaApi.Model.Tracker{}},
      { 400, %RasaApi.Model.Error{}},
      { 401, %RasaApi.Model.Error{}},
      { 403, %RasaApi.Model.Error{}},
      { 409, %RasaApi.Model.Error{}},
      { 500, %RasaApi.Model.Error{}}
    ])
  end

  @doc """
  Append events to a tracker
  Appends one or multiple new events to the tracker state of the conversation. Any existing events will be kept and the new events will be appended, updating the existing state.

  ## Parameters

  - connection (RasaApi.Connection): Connection to server
  - conversation_id (String.t): Id of the conversation
  - u_nknownbasetype (UNKNOWN_BASE_TYPE): 
  - opts (KeywordList): [optional] Optional parameters
    - :include_events (String.t): Specify which events of the tracker the response should contain.
  ## Returns

  {:ok, %RasaApi.Model.Tracker{}} on success
  {:error, info} on failure
  """
  @spec add_conversation_tracker_events(Tesla.Env.client, String.t, RasaApi.Model.UNKNOWN_BASE_TYPE.t, keyword()) :: {:ok, RasaApi.Model.Tracker.t} | {:error, Tesla.Env.t}
  def add_conversation_tracker_events(connection, conversation_id, u_nknownbasetype, opts \\ []) do
    optional_params = %{
      include_events: :query
    }
    %{}
    |> method(:post)
    |> url("/conversations/#{conversation_id}/tracker/events")
    |> add_param(:body, :body, u_nknownbasetype)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %RasaApi.Model.Tracker{}},
      { 400, %RasaApi.Model.Error{}},
      { 401, %RasaApi.Model.Error{}},
      { 403, %RasaApi.Model.Error{}},
      { 409, %RasaApi.Model.Error{}},
      { 500, %RasaApi.Model.Error{}}
    ])
  end

  @doc """
  Run an action in a conversation
  DEPRECATED. Runs the action, calling the action server if necessary. Any responses sent by the executed action will be forwarded to the channel specified in the output_channel parameter. If no output channel is specified, any messages that should be sent to the user will be included in the response of this endpoint.

  ## Parameters

  - connection (RasaApi.Connection): Connection to server
  - conversation_id (String.t): Id of the conversation
  - action_request (ActionRequest): 
  - opts (KeywordList): [optional] Optional parameters
    - :include_events (String.t): Specify which events of the tracker the response should contain.
    - :output_channel (String.t): The bot's utterances will be forwarded to this channel. It uses the credentials listed in `credentials.yml` to connect. In case the channel does not support this, the utterances will be returned in the response body. Use `latest` to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter.
  ## Returns

  {:ok, %RasaApi.Model.InlineResponse2002{}} on success
  {:error, info} on failure
  """
  @spec execute_conversation_action(Tesla.Env.client, String.t, RasaApi.Model.ActionRequest.t, keyword()) :: {:ok, RasaApi.Model.InlineResponse2002.t} | {:error, Tesla.Env.t}
  def execute_conversation_action(connection, conversation_id, action_request, opts \\ []) do
    optional_params = %{
      include_events: :query,
      output_channel: :query
    }
    %{}
    |> method(:post)
    |> url("/conversations/#{conversation_id}/execute")
    |> add_param(:body, :body, action_request)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %RasaApi.Model.InlineResponse2002{}},
      { 400, %RasaApi.Model.Error{}},
      { 401, %RasaApi.Model.Error{}},
      { 403, %RasaApi.Model.Error{}},
      { 409, %RasaApi.Model.Error{}},
      { 500, %RasaApi.Model.Error{}}
    ])
  end

  @doc """
  Retrieve an end-to-end story corresponding to a conversation
  The story represents the whole conversation in end-to-end format. This can be posted to the '/test/stories' endpoint and used as a test.

  ## Parameters

  - connection (RasaApi.Connection): Connection to server
  - conversation_id (String.t): Id of the conversation
  - opts (KeywordList): [optional] Optional parameters
    - :until (float()): All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included.
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_conversation_story(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_conversation_story(connection, conversation_id, opts \\ []) do
    optional_params = %{
      until: :query
    }
    %{}
    |> method(:get)
    |> url("/conversations/#{conversation_id}/story")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, %RasaApi.Model.Error{}},
      { 403, %RasaApi.Model.Error{}},
      { 409, %RasaApi.Model.Error{}},
      { 500, %RasaApi.Model.Error{}}
    ])
  end

  @doc """
  Retrieve a conversations tracker
  The tracker represents the state of the conversation. The state of the tracker is created by applying a sequence of events, which modify the state. These events can optionally be included in the response.

  ## Parameters

  - connection (RasaApi.Connection): Connection to server
  - conversation_id (String.t): Id of the conversation
  - opts (KeywordList): [optional] Optional parameters
    - :include_events (String.t): Specify which events of the tracker the response should contain.
    - :until (float()): All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included.
  ## Returns

  {:ok, %RasaApi.Model.Tracker{}} on success
  {:error, info} on failure
  """
  @spec get_conversation_tracker(Tesla.Env.client, String.t, keyword()) :: {:ok, RasaApi.Model.Tracker.t} | {:error, Tesla.Env.t}
  def get_conversation_tracker(connection, conversation_id, opts \\ []) do
    optional_params = %{
      include_events: :query,
      until: :query
    }
    %{}
    |> method(:get)
    |> url("/conversations/#{conversation_id}/tracker")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %RasaApi.Model.Tracker{}},
      { 400, %RasaApi.Model.Error{}},
      { 401, %RasaApi.Model.Error{}},
      { 403, %RasaApi.Model.Error{}},
      { 409, %RasaApi.Model.Error{}},
      { 500, %RasaApi.Model.Error{}}
    ])
  end

  @doc """
  Predict the next action
  Runs the conversations tracker through the model's policies to predict the scores of all actions present in the model's domain. Actions are returned in the 'scores' array, sorted on their 'score' values. The state of the tracker is not modified.

  ## Parameters

  - connection (RasaApi.Connection): Connection to server
  - conversation_id (String.t): Id of the conversation
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %RasaApi.Model.PredictResult{}} on success
  {:error, info} on failure
  """
  @spec predict_conversation_action(Tesla.Env.client, String.t, keyword()) :: {:ok, RasaApi.Model.PredictResult.t} | {:error, Tesla.Env.t}
  def predict_conversation_action(connection, conversation_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conversations/#{conversation_id}/predict")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %RasaApi.Model.PredictResult{}},
      { 400, %RasaApi.Model.Error{}},
      { 401, %RasaApi.Model.Error{}},
      { 403, %RasaApi.Model.Error{}},
      { 409, %RasaApi.Model.Error{}},
      { 500, %RasaApi.Model.Error{}}
    ])
  end

  @doc """
  Replace a trackers events
  Replaces all events of a tracker with the passed list of events. This endpoint should not be used to modify trackers in a production setup, but rather for creating training data.

  ## Parameters

  - connection (RasaApi.Connection): Connection to server
  - conversation_id (String.t): Id of the conversation
  - event ([Event]): 
  - opts (KeywordList): [optional] Optional parameters
    - :include_events (String.t): Specify which events of the tracker the response should contain.
  ## Returns

  {:ok, %RasaApi.Model.Tracker{}} on success
  {:error, info} on failure
  """
  @spec replace_conversation_tracker_events(Tesla.Env.client, String.t, list(RasaApi.Model.Event.t), keyword()) :: {:ok, RasaApi.Model.Tracker.t} | {:error, Tesla.Env.t}
  def replace_conversation_tracker_events(connection, conversation_id, event, opts \\ []) do
    optional_params = %{
      include_events: :query
    }
    %{}
    |> method(:put)
    |> url("/conversations/#{conversation_id}/tracker/events")
    |> add_param(:body, :body, event)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %RasaApi.Model.Tracker{}},
      { 400, %RasaApi.Model.Error{}},
      { 401, %RasaApi.Model.Error{}},
      { 403, %RasaApi.Model.Error{}},
      { 409, %RasaApi.Model.Error{}},
      { 500, %RasaApi.Model.Error{}}
    ])
  end

  @doc """
  Inject an intent into a conversation
  Sends a specified intent and list of entities in place of a user message. The bot then predicts and executes a response action. Any responses sent by the executed action will be forwarded to the channel specified in the ``output_channel`` parameter. If no output channel is specified, any messages that should be sent to the user will be included in the response of this endpoint.

  ## Parameters

  - connection (RasaApi.Connection): Connection to server
  - conversation_id (String.t): Id of the conversation
  - intent_trigger_request (IntentTriggerRequest): 
  - opts (KeywordList): [optional] Optional parameters
    - :include_events (String.t): Specify which events of the tracker the response should contain.
    - :output_channel (String.t): The bot's utterances will be forwarded to this channel. It uses the credentials listed in `credentials.yml` to connect. In case the channel does not support this, the utterances will be returned in the response body. Use `latest` to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter.
  ## Returns

  {:ok, %RasaApi.Model.InlineResponse2002{}} on success
  {:error, info} on failure
  """
  @spec trigger_conversation_intent(Tesla.Env.client, String.t, RasaApi.Model.IntentTriggerRequest.t, keyword()) :: {:ok, RasaApi.Model.InlineResponse2002.t} | {:error, Tesla.Env.t}
  def trigger_conversation_intent(connection, conversation_id, intent_trigger_request, opts \\ []) do
    optional_params = %{
      include_events: :query,
      output_channel: :query
    }
    %{}
    |> method(:post)
    |> url("/conversations/#{conversation_id}/trigger_intent")
    |> add_param(:body, :body, intent_trigger_request)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %RasaApi.Model.InlineResponse2002{}},
      { 400, %RasaApi.Model.Error{}},
      { 401, %RasaApi.Model.Error{}},
      { 403, %RasaApi.Model.Error{}},
      { 409, %RasaApi.Model.Error{}},
      { 500, %RasaApi.Model.Error{}}
    ])
  end
end
